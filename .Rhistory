# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("[[fruits]]", "a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro + fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro) print(fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro), print(fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(intro) print(fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- past(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
paste(intro, fruits_o)
my.name <- "sabrina"
16_years_old <- 16
my.name <- "Sabrina Fang"
install.packages(stringr)
install.packages("stringr")
cls
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_score <- c(38, 35, 38, 31)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_score <- c(25, 30, 31, 23)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_score, opponent_score)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_score - games$opponent_score
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games[games$seahawks_score > games$seahawks_score, ]
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games[games$seahawks_score > games$opponent_score, ]
View(games)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games[games$seahawks_score > games$opponent_score, ]
View(games)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$seahawks_score > games$opponent_score
View(games)
View(games)
# Create a vector of the opponent names corresponding to the games played
opponent_names <- c("Atlanta Falcons", "New England Patriots", "Dallas Cowboys", "Miami Dolphins")
# Assign your dataframe rownames of their opponents
games$rownames <- opponent_names
View(games)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
View(games)
View(games)
# View your data frame to see how it has changed!
View(games)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
library(dplyr)
flights
View(flights)
flights <- mutate(flights, air_gain == arr_delay - dep_delay)
flights <- mutate(flights, air_gain = arr_delay - dep_delay)
view(flights)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(air_gain))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(air_gain = arr_delay - dep_delay) %>%
arrange(desc(air_gain))
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$air_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$air_gain, na.rm = TRUE)
View(flights)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
arr_sea_tac <- flights %>%
filter(dest == "SEA")
View(arr_sea_tac)
View(arr_sea_tac)
# On average, did flights to SeaTac gain or loose time?
mean(arr_sea_tac$air_gain)
# On average, did flights to SeaTac gain or loose time?
mean(arr_sea_tac$air_gain, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(mean_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE)
)
View(jfk_to_sea)
View(jfk_to_sea)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
monthly_dep_delay <- flights %>%
group_by(month) %>%
mean(dep_delay)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
monthly_dep_delay <- flights %>%
group_by(month) %>%
summarize(mean_delay = mean(dep_delay))
View(monthly_dep_delay)
View(monthly_dep_delay)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
monthly_dep_delay <- flights %>%
group_by(month) %>%
summarize(mean_delay = mean(dep_delay, na.rm = TRUE))
View(monthly_dep_delay)
View(monthly_dep_delay)
# Which month had the greatest average departure delay?
max(monthly_dep_delay$mean_delay)
# Which month had the greatest average departure delay?
monthly_dep_delay[max(monthly_dep_delay$mean_delay), "month"]
# Which month had the greatest average departure delay?
monthly_dep_delay[monthly_dep_delay$mean_delay == max(mean_delay), "month"]
# Which month had the greatest average departure delay?
monthly_dep_delay[monthly_dep_delay$mean_delay == max(mean_delay, na.rm = FALSE), "month"]
# Which month had the greatest average departure delay?
filter(monthly_dep_delay, mean_delay == max(mean_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(monthly_dep_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
monthly_arr_delay <- flights %>%
group_by(dest) %>%
summarize(mean_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean_delay)
View(monthly_arr_delay)
View(monthly_arr_delay)
View(monthly_arr_delay)
head(monthly_arr_delay)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == monthly_arr_delay$dest[1:3])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == monthly_arr_delay$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == monthly_arr_delay$dest[2])
# Which city was flown to with the highest average speed?
fastest_city <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed))
View(fastest_city)
View(fastest_city)
# Which city was flown to with the highest average speed?
fastest_city <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed))
View(fastest_city)
View(fastest_city)
# Which city was flown to with the highest average speed?
fastest_city <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
View(fastest_city)
View(fastest_city)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arr_delay <- flights %>%
group_by(dest) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports) %>%
filter(mean_arr_delay == max(mean_arr_delay, na.rm = TRUE))
View(largest_arr_delay)
View(largest_arr_delay)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_arr_delay <- flights %>%
group_by(carrier) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines) %>%
filter(mean_arr_delay == min(mean_arr_delay, na.rm = TRUE))
View(smallest_arr_delay)
View(smallest_arr_delay)
setwd("~/info 201/info-201-final-project")
source('~/info 201/info-201-final-project/chart1.R')
rating_disney_plus <- disney_plus %>%
select(year, )
rating_disney_plus <- disney_plus %>%
select(year) %>%
filter(rated %in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated %in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated %in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated !%in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != %in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != %!in% c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed"))
DNE <- c("N/A", "APPROVED", "Not Rated", "Approved", "UNRATED", "NOT RATED", "Unrated", "PASSED", "Passed")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != DNE)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A")
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A" & "APPROVED")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A" | "APPROVED")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A | APPROVED")
View(disney_plus)
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A", "APPROVED")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A", rated != "APPROVED")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != list("N/A", "APPROVED"))
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != list("N/A", "APPROVED"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != c("N/A", "APPROVED"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != c("N/A", "APPROVED"))
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != c("N/A", "APPROVED", "Not Rated"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != list("N/A", "APPROVED", "Not Rated"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(as.vector(rated) != c("N/A", "APPROVED", "Not Rated"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A" | "APPROVED" | "Not Rated"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != "N/A" | "APPROVED" | "Not Rated")
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != as.numeric("N/A") | as.numeric("APPROVED") | as.numeric("Not Rated"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != N/A | APPROVED | Not Rated)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != N/A | APPROVED | Not)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != DNE)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated != DNE)
unique(disney_plus$rated)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated  == c("PG-13", "N/A", "G"))
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated %in% c("PG-13", "G", "PG"))
View(rating_disney_plus)
rating_disney_plus <- disney_plus %>%
select(year, rated) %>%
filter(rated %in% c("PG-13", "G", "PG", "TV-G", "TV-PG", "TV-Y7", "TV-Y", "TV-14", "TV-Y7", "TV-Y7-FV"))
rating_disney_plus <- disney_plus %>%
pull(rated) %>%
str_replace_all("TV-G", "G") %>%
str_replace_all("TV-PG", "PG") %>%
str_replace_all("TV-Y7", "PG") %>%
str_replace_all("TV-Y", "G") %>%
str_replace_all("TV-14", "PG-13") %>%
str_replace_all("TV-Y7-FV", "PG")
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"))
View(table_disney_plus)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == is.numeric(year))
View(table_amazon_prime)
View(table_disney_plus)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"))
View(table_disney_plus)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year = as.numeric(year, na.rm = TRUE))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"))
View(table_amazon_prime)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year = as.numeric(year))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == as.numeric(year))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == as.numeric(year, na.rm = TRUE))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == !is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year =! is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == !is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year = as.numeric(year))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == as.numeric(year))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == !is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), !is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == na.omit((as.numeric(year))))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG")) %>%
mutate(year = na.omit((as.numeric(year))))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG")) %>%
mutate(na.omit((as.numeric(year))))
View(table_disney_plus)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year == drop_na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"), year != na.omit(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG")) %>%
filter(!is.na(as.numeric(year)))
suppressWarnings(expr)
View(table_disney_plus)
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG")) %>%
filter(!is.na(as.numeric(year)))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG"))
table_disney_plus <- disney_plus %>%
select(year) %>%
mutate(rating = rating_disney_plus) %>%
filter(rating %in% c("PG-13", "G", "PG")) %>%
filter(!is.na(as.numeric(year)))
View(table_disney_plus)
View(table_amazon_prime)
rating_amazon_prime <- amazon_prime %>%
pull(Age.of.viewers) %>%
str_replace_all("18+", "R") %>%
str_replace_all("13+", "PG-13") %>%
str_replace_all("16+", "PG-13") %>%
str_replace_all("7+", "PG") %>%
str_replace_all("All", "G")
table_amazon_prime <- amazon_prime %>%
select(Year.of.release) %>%
mutate(rating = rating_amazon_prime) %>%
rename(year = Year.of.release) %>%
filter(year != "", rating != "")
source('~/info 201/info-201-final-project/chart1.R')
View(table_amazon_prime)
View(table_disney_plus)
=======
setwd("C:/Users/lil.khrist/code/info-201-final-project")
setwd("C:/Users/lil.khrist/code/info-201-final-project")
